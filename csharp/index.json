{
  "README.html": {
    "href": "README.html",
    "title": "Lino Protocol Parser for C# | LinksPlatform's Platform.links-notation Library",
    "summary": "Lino Protocol Parser for C# C# implementation of the Lino protocol parser using Pegasus parser generator and Platform.Collections. Installation Package Manager Install-Package Platform.Protocols.Lino .NET CLI dotnet add package Platform.Protocols.Lino PackageReference <PackageReference Include=\"Platform.Protocols.Lino\" Version=\"0.4.5\" /> Build from Source Clone the repository and build: git clone https://github.com/link-foundation/links-notation.git cd links-notation/csharp dotnet build Platform.Protocols.Lino.sln Test Run tests: dotnet test Usage Basic Parsing using Platform.Protocols.Lino; // Create parser var parser = new Parser(); // Parse Lino format string string input = @\"papa (lovesMama: loves mama) son lovesMama daughter lovesMama all (love mama)\"; var links = parser.Parse(input); // Access parsed links foreach (var link in links) { Console.WriteLine(link.ToString()); } Converting Back to String using Platform.Protocols.Lino; // Format links back to string string formatted = links.Format(); Console.WriteLine(formatted); Working with Links // Create link programmatically var link = new Link<string>(\"id\", new[] { \"value1\", \"value2\" }); // Access link properties Console.WriteLine($\"ID: {link.Id}\"); foreach (var value in link.Values) { Console.WriteLine($\"Value: {value}\"); } Advanced Usage with Generic Types // Using numeric link addresses var parser = new Parser<ulong>(); var numericLinks = parser.Parse(\"(1: 2 3)\"); // Working with custom address types var customParser = new Parser<Guid>(); Syntax Examples Doublets (2-tuple) papa (lovesMama: loves mama) son lovesMama daughter lovesMama all (love mama) Triplets (3-tuple) papa has car mama has house (papa and mama) are happy N-tuples with References (linksNotation: links notation) (This is a linksNotation as well) (linksNotation supports (unlimited number (of references) in each link)) API Reference Classes Parser<TLinkAddress>: Main parser class for converting strings to links Link<TLinkAddress>: Represents a single link with ID and values LinksGroup<TLinkAddress>: Container for grouping related links Extension Methods IListExtensions.Format(): Converts list of links back to string format ILinksGroupListExtensions: Additional operations for link groups Dependencies .NET 8.0 Microsoft.CSharp (4.7.0) Pegasus (4.1.0) Platform.Collections (0.3.2) Documentation For complete API documentation, visit: Link.Foundation.Links.Notation Documentation"
  },
  "README.ru.html": {
    "href": "README.ru.html",
    "title": "Парсер протокола Lino для C# | LinksPlatform's Platform.links-notation Library",
    "summary": "Парсер протокола Lino для C# Реализация парсера протокола Lino для C# с использованием генератора парсеров Pegasus и Platform.Collections. Установка Менеджер пакетов Install-Package Platform.Protocols.Lino .NET CLI dotnet add package Platform.Protocols.Lino PackageReference <PackageReference Include=\"Platform.Protocols.Lino\" Version=\"0.4.5\" /> Сборка из исходного кода Клонируйте репозиторий и соберите проект: git clone https://github.com/link-foundation/links-notation.git cd links-notation/csharp dotnet build Platform.Protocols.Lino.sln Тестирование Запуск тестов: dotnet test Использование Базовый парсинг using Platform.Protocols.Lino; // Создаем парсер var parser = new Parser(); // Парсим строку в формате Lino string input = @\"папа (любитМаму: любит маму) сын любитМаму дочь любитМаму все (любят маму)\"; var links = parser.Parse(input); // Обращение к распарсенным связям foreach (var link in links) { Console.WriteLine(link.ToString()); } Преобразование обратно в строку using Platform.Protocols.Lino; // Форматирование связей обратно в строку string formatted = links.Format(); Console.WriteLine(formatted); Работа со связями // Создание связи программно var link = new Link<string>(\"идентификатор\", new[] { \"значение1\", \"значение2\" }); // Доступ к свойствам связи Console.WriteLine($\"ID: {link.Id}\"); foreach (var value in link.Values) { Console.WriteLine($\"Значение: {value}\"); } Расширенное использование с универсальными типами // Использование числовых адресов связей var parser = new Parser<ulong>(); var numericLinks = parser.Parse(\"(1: 2 3)\"); // Работа с пользовательскими типами адресов var customParser = new Parser<Guid>(); Примеры синтаксиса Дуплеты (2-кортежи) папа (любитМаму: любит маму) сын любитМаму дочь любитМаму все (любят маму) Триплеты (3-кортежи) папа имеет машину мама имеет дом (папа и мама) счастливы N-кортежи со ссылками (нотацияСвязей: нотация связей) (Это тоже нотацияСвязей) (нотацияСвязей поддерживает (неограниченное количество (ссылок) в каждой связи)) Справочник API Классы Parser<TLinkAddress>: Основной класс парсера для преобразования строк в связи Link<TLinkAddress>: Представляет одну связь с ID и значениями LinksGroup<TLinkAddress>: Контейнер для группировки связанных связей Методы расширения IListExtensions.Format(): Преобразует список связей обратно в строковый формат ILinksGroupListExtensions: Дополнительные операции для групп связей Зависимости .NET 8.0 Microsoft.CSharp (4.7.0) Pegasus (4.1.0) Platform.Collections (0.3.2) Документация Полная документация API: Link.Foundation.Links.Notation Documentation"
  },
  "api/Link.Foundation.Links.Notation.ILinksGroupListExtensions.html": {
    "href": "api/Link.Foundation.Links.Notation.ILinksGroupListExtensions.html",
    "title": "Class ILinksGroupListExtensions | LinksPlatform's Platform.links-notation Library",
    "summary": "Class ILinksGroupListExtensions Provides extension methods for collections of LinksGroup<TLinkAddress> instances. Inheritance object ILinksGroupListExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Link.Foundation.Links.Notation Assembly: LinkFoundation.LinksNotation.dll Syntax public static class ILinksGroupListExtensions Methods | Edit this page View Source ToLinksList<TLinkAddress>(IList<LinksGroup<TLinkAddress>>) Converts a collection of links groups to a flat list of links by processing each group hierarchically. Declaration public static List<Link<TLinkAddress>> ToLinksList<TLinkAddress>(this IList<LinksGroup<TLinkAddress>> groups) Parameters Type Name Description IList<LinksGroup<TLinkAddress>> groups The collection of links groups to convert. Returns Type Description List<Link<TLinkAddress>> A flat list of links representing all the links from the input groups. Type Parameters Name Description TLinkAddress The type used for link addresses/identifiers. This can be any type that uniquely identifies a link, such as string, int, or Guid."
  },
  "api/Link.Foundation.Links.Notation.IListExtensions.html": {
    "href": "api/Link.Foundation.Links.Notation.IListExtensions.html",
    "title": "Class IListExtensions | LinksPlatform's Platform.links-notation Library",
    "summary": "Class IListExtensions Provides extension methods for formatting collections of Link<TLinkAddress> instances. Inheritance object IListExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Link.Foundation.Links.Notation Assembly: LinkFoundation.LinksNotation.dll Syntax public static class IListExtensions Methods | Edit this page View Source Format<TLinkAddress>(IList<Link<TLinkAddress>>) Formats a collection of links as a multi-line string with each link on a separate line. Declaration public static string Format<TLinkAddress>(this IList<Link<TLinkAddress>> links) Parameters Type Name Description IList<Link<TLinkAddress>> links The collection of links to format. Returns Type Description string A multi-line string representation of the links. Type Parameters Name Description TLinkAddress The type used for link addresses/identifiers. | Edit this page View Source Format<TLinkAddress>(IList<Link<TLinkAddress>>, bool) Formats a collection of links as a multi-line string with optional parentheses trimming for cleaner output. Declaration public static string Format<TLinkAddress>(this IList<Link<TLinkAddress>> links, bool lessParentheses) Parameters Type Name Description IList<Link<TLinkAddress>> links The collection of links to format. bool lessParentheses True to remove outer parentheses from each link for cleaner formatting; false to use standard formatting. Returns Type Description string A multi-line string representation of the links. Type Parameters Name Description TLinkAddress The type used for link addresses/identifiers."
  },
  "api/Link.Foundation.Links.Notation.Link-1.html": {
    "href": "api/Link.Foundation.Links.Notation.Link-1.html",
    "title": "Struct Link<TLinkAddress> | LinksPlatform's Platform.links-notation Library",
    "summary": "Struct Link<TLinkAddress> Represents a link in the Lino protocol with an optional identifier and nested values. Links can represent simple references, complex nested structures, or relationships between references to links. Implements IEquatable<Link<TLinkAddress>> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Link.Foundation.Links.Notation Assembly: LinkFoundation.LinksNotation.dll Syntax public struct Link<TLinkAddress> : IEquatable<Link<TLinkAddress>> Type Parameters Name Description TLinkAddress The type used for link addresses/identifiers. This can be any type that uniquely identifies a link, such as string, int, or Guid. Constructors | Edit this page View Source Link(params Link<TLinkAddress>[]) Initializes a new anonymous link with the specified array of values. Declaration public Link(params Link<TLinkAddress>[] values) Parameters Type Name Description Link<TLinkAddress>[] values The nested link values as a parameter array. | Edit this page View Source Link(IList<Link<TLinkAddress>>) Initializes a new anonymous link with the specified values. Declaration public Link(IList<Link<TLinkAddress>> values) Parameters Type Name Description IList<Link<TLinkAddress>> values The nested link values. | Edit this page View Source Link(TLinkAddress) Initializes a new simple reference link with the specified identifier. Declaration public Link(TLinkAddress id) Parameters Type Name Description TLinkAddress id The link identifier or address. | Edit this page View Source Link(TLinkAddress?, IList<Link<TLinkAddress>>?) Initializes a new link with the specified identifier and values. Declaration public Link(TLinkAddress? id, IList<Link<TLinkAddress>>? values) Parameters Type Name Description TLinkAddress id The link identifier or address. IList<Link<TLinkAddress>> values The nested link values. Fields | Edit this page View Source Id Gets the identifier or address of this link. Can be null for anonymous links. Declaration public readonly TLinkAddress? Id Field Value Type Description TLinkAddress | Edit this page View Source Values Gets the collection of nested link values. Can be null or empty for simple reference links. Declaration public readonly IList<Link<TLinkAddress>>? Values Field Value Type Description IList<Link<TLinkAddress>> Methods | Edit this page View Source Combine(Link<TLinkAddress>) Combines this link with another link to create a new link containing both as values. Declaration public Link<TLinkAddress> Combine(Link<TLinkAddress> other) Parameters Type Name Description Link<TLinkAddress> other The other link to combine with. Returns Type Description Link<TLinkAddress> A new link containing both links as values. | Edit this page View Source Equals(Link<TLinkAddress>) Indicates whether the current link is equal to another link. Declaration public bool Equals(Link<TLinkAddress> other) Parameters Type Name Description Link<TLinkAddress> other The link to compare with this link. Returns Type Description bool True if the current link is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to this link. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with this link. Returns Type Description bool True if the specified object is equal to this link; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source EscapeReference(string?) Escapes a reference string for safe use in Lino protocol format by adding quotes if necessary. Declaration public static string EscapeReference(string? reference) Parameters Type Name Description string reference The reference string to escape. Returns Type Description string The escaped reference string with appropriate quoting. | Edit this page View Source GetHashCode() Returns the hash code for this link. Declaration public override int GetHashCode() Returns Type Description int A hash code for this link. Overrides ValueType.GetHashCode() | Edit this page View Source GetValueString(Link<TLinkAddress>) Gets the string representation of a link value, choosing the appropriate format. Declaration public static string GetValueString(Link<TLinkAddress> value) Parameters Type Name Description Link<TLinkAddress> value The link value to convert to string. Returns Type Description string The string representation of the link value. | Edit this page View Source GetValuesString() Gets the string representation of the link's values. Declaration public string GetValuesString() Returns Type Description string A space-separated string of the values, or empty string if no values exist. | Edit this page View Source Simplify() Simplifies the link structure by unwrapping single-value containers and recursively simplifying nested values. Declaration public Link<TLinkAddress> Simplify() Returns Type Description Link<TLinkAddress> A simplified version of this link. | Edit this page View Source ToLinkOrIdString() Converts the link to its string representation, choosing between simple reference format or full link format. Declaration public string ToLinkOrIdString() Returns Type Description string A string representation optimized for the link's content. | Edit this page View Source ToString() Returns the string representation of this link in Lino protocol format. Declaration public override string ToString() Returns Type Description string A string representation of the link with proper escaping and formatting. Overrides ValueType.ToString() Operators | Edit this page View Source operator ==(Link<TLinkAddress>, Link<TLinkAddress>) Determines whether two link instances are equal. Declaration public static bool operator ==(Link<TLinkAddress> left, Link<TLinkAddress> right) Parameters Type Name Description Link<TLinkAddress> left The first link to compare. Link<TLinkAddress> right The second link to compare. Returns Type Description bool True if the links are equal; otherwise, false. | Edit this page View Source implicit operator Link<TLinkAddress>((Link<TLinkAddress> source, Link<TLinkAddress> linker, Link<TLinkAddress> target)) Implicitly converts a source-linker-target triplet to an anonymous link. Declaration public static implicit operator Link<TLinkAddress>((Link<TLinkAddress> source, Link<TLinkAddress> linker, Link<TLinkAddress> target) value) Parameters Type Name Description (Link<TLinkAddress> source, Link<TLinkAddress> linker, Link<TLinkAddress> target) value The tuple containing source, linker, and target links. Returns Type Description Link<TLinkAddress> | Edit this page View Source implicit operator Link<TLinkAddress>((Link<TLinkAddress> source, Link<TLinkAddress> target)) Implicitly converts a source-target pair to an anonymous link. Declaration public static implicit operator Link<TLinkAddress>((Link<TLinkAddress> source, Link<TLinkAddress> target) value) Parameters Type Name Description (Link<TLinkAddress> source, Link<TLinkAddress> target) value The tuple containing source and target links. Returns Type Description Link<TLinkAddress> | Edit this page View Source implicit operator Link<TLinkAddress>((id<TLinkAddress> id, Link<TLinkAddress> source, Link<TLinkAddress> linker, Link<TLinkAddress> target)) Implicitly converts a tuple of identifier, source, linker, and target to a link. Declaration public static implicit operator Link<TLinkAddress>((id<TLinkAddress> id, Link<TLinkAddress> source, Link<TLinkAddress> linker, Link<TLinkAddress> target) value) Parameters Type Name Description (id<TLinkAddress> id, Link<TLinkAddress> source, Link<TLinkAddress> linker, Link<TLinkAddress> target) value The tuple containing id, source, linker, and target. Returns Type Description Link<TLinkAddress> | Edit this page View Source implicit operator Link<TLinkAddress>((id<TLinkAddress> id, Link<TLinkAddress> source, Link<TLinkAddress> target)) Implicitly converts a tuple of identifier, source, and target to a link. Declaration public static implicit operator Link<TLinkAddress>((id<TLinkAddress> id, Link<TLinkAddress> source, Link<TLinkAddress> target) value) Parameters Type Name Description (id<TLinkAddress> id, Link<TLinkAddress> source, Link<TLinkAddress> target) value The tuple containing id, source and target. Returns Type Description Link<TLinkAddress> | Edit this page View Source implicit operator Link<TLinkAddress>((TLinkAddress, IList<Link<TLinkAddress>>)) Implicitly converts a tuple of identifier and values to a link. Declaration public static implicit operator Link<TLinkAddress>((TLinkAddress, IList<Link<TLinkAddress>>) value) Parameters Type Name Description (TLinkAddress, IList<Link<TLinkAddress>>) value The tuple containing identifier and values. Returns Type Description Link<TLinkAddress> | Edit this page View Source implicit operator Link<TLinkAddress>(TLinkAddress) Implicitly converts a value to a simple reference link. Declaration public static implicit operator Link<TLinkAddress>(TLinkAddress value) Parameters Type Name Description TLinkAddress value The value to convert. Returns Type Description Link<TLinkAddress> | Edit this page View Source operator !=(Link<TLinkAddress>, Link<TLinkAddress>) Determines whether two link instances are not equal. Declaration public static bool operator !=(Link<TLinkAddress> left, Link<TLinkAddress> right) Parameters Type Name Description Link<TLinkAddress> left The first link to compare. Link<TLinkAddress> right The second link to compare. Returns Type Description bool True if the links are not equal; otherwise, false. Implements IEquatable<T>"
  },
  "api/Link.Foundation.Links.Notation.LinksGroup-1.html": {
    "href": "api/Link.Foundation.Links.Notation.LinksGroup-1.html",
    "title": "Struct LinksGroup<TLinkAddress> | LinksPlatform's Platform.links-notation Library",
    "summary": "Struct LinksGroup<TLinkAddress> Represents a group of links with hierarchical structure, where each group contains a primary link and optional nested groups. This structure supports the indentation-based syntax of the Lino protocol. Implements IEquatable<LinksGroup<TLinkAddress>> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Link.Foundation.Links.Notation Assembly: LinkFoundation.LinksNotation.dll Syntax public struct LinksGroup<TLinkAddress> : IEquatable<LinksGroup<TLinkAddress>> Type Parameters Name Description TLinkAddress The type used for link addresses/identifiers. This can be any type that uniquely identifies a link, such as string, int, or Guid. Constructors | Edit this page View Source LinksGroup(Link<TLinkAddress>) Initializes a new links group with the specified link and no nested groups. Declaration public LinksGroup(Link<TLinkAddress> link) Parameters Type Name Description Link<TLinkAddress> link The primary link of this group. | Edit this page View Source LinksGroup(Link<TLinkAddress>, IList<LinksGroup<TLinkAddress>>?) Initializes a new links group with the specified link and nested groups. Declaration public LinksGroup(Link<TLinkAddress> link, IList<LinksGroup<TLinkAddress>>? groups) Parameters Type Name Description Link<TLinkAddress> link The primary link of this group. IList<LinksGroup<TLinkAddress>> groups The nested groups within this group. Properties | Edit this page View Source Groups Gets or sets the collection of nested groups within this group. Can be null if no nested groups exist. Declaration public IList<LinksGroup<TLinkAddress>>? Groups { readonly get; set; } Property Value Type Description IList<LinksGroup<TLinkAddress>> | Edit this page View Source Link Gets or sets the primary link of this group. Declaration public Link<TLinkAddress> Link { readonly get; set; } Property Value Type Description Link<TLinkAddress> Methods | Edit this page View Source AppendToLinksList(List<Link<TLinkAddress>>) Appends this links group to the specified list as flattened links. Declaration public void AppendToLinksList(List<Link<TLinkAddress>> list) Parameters Type Name Description List<Link<TLinkAddress>> list The list to append the links to. | Edit this page View Source AppendToLinksList(List<Link<TLinkAddress>>, Link<TLinkAddress>, LinksGroup<TLinkAddress>) Recursively appends a links group to a list, combining dependencies with nested groups to create a flattened structure. Declaration public static void AppendToLinksList(List<Link<TLinkAddress>> list, Link<TLinkAddress> dependency, LinksGroup<TLinkAddress> group) Parameters Type Name Description List<Link<TLinkAddress>> list The list to append the links to. Link<TLinkAddress> dependency The dependency link to combine with nested groups. LinksGroup<TLinkAddress> group The links group to process. | Edit this page View Source Equals(LinksGroup<TLinkAddress>) Indicates whether the current links group is equal to another links group. Declaration public bool Equals(LinksGroup<TLinkAddress> other) Parameters Type Name Description LinksGroup<TLinkAddress> other The links group to compare with this links group. Returns Type Description bool True if the current links group is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to this links group. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with this links group. Returns Type Description bool True if the specified object is equal to this links group; otherwise, false. Overrides ValueType.Equals(object) | Edit this page View Source GetHashCode() Returns the hash code for this links group. Declaration public override int GetHashCode() Returns Type Description int A hash code for this links group. Overrides ValueType.GetHashCode() | Edit this page View Source ToLinksList() Converts this links group to a flat list of links, preserving the hierarchical relationships. Declaration public List<Link<TLinkAddress>> ToLinksList() Returns Type Description List<Link<TLinkAddress>> A list of links representing the flattened structure of this group. Operators | Edit this page View Source operator ==(LinksGroup<TLinkAddress>, LinksGroup<TLinkAddress>) Determines whether two links group instances are equal. Declaration public static bool operator ==(LinksGroup<TLinkAddress> left, LinksGroup<TLinkAddress> right) Parameters Type Name Description LinksGroup<TLinkAddress> left The first links group to compare. LinksGroup<TLinkAddress> right The second links group to compare. Returns Type Description bool True if the links groups are equal; otherwise, false. | Edit this page View Source implicit operator List<Link<TLinkAddress>>(LinksGroup<TLinkAddress>) Implicitly converts a links group to a list of links by flattening the hierarchical structure. Declaration public static implicit operator List<Link<TLinkAddress>>(LinksGroup<TLinkAddress> value) Parameters Type Name Description LinksGroup<TLinkAddress> value The links group to convert. Returns Type Description List<Link<TLinkAddress>> | Edit this page View Source operator !=(LinksGroup<TLinkAddress>, LinksGroup<TLinkAddress>) Determines whether two links group instances are not equal. Declaration public static bool operator !=(LinksGroup<TLinkAddress> left, LinksGroup<TLinkAddress> right) Parameters Type Name Description LinksGroup<TLinkAddress> left The first links group to compare. LinksGroup<TLinkAddress> right The second links group to compare. Returns Type Description bool True if the links groups are not equal; otherwise, false. Implements IEquatable<T>"
  },
  "api/Link.Foundation.Links.Notation.Parser.html": {
    "href": "api/Link.Foundation.Links.Notation.Parser.html",
    "title": "Class Parser | LinksPlatform's Platform.links-notation Library",
    "summary": "Class Parser Parses a string according to the rules of the Parser grammar. Inheritance object Parser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Link.Foundation.Links.Notation Assembly: LinkFoundation.LinksNotation.dll Syntax public class Parser Methods | Edit this page View Source Parse(string, string) Parses a string according to the rules of the Parser grammar. Declaration public IList<Link<string>> Parse(string subject, string fileName = null) Parameters Type Name Description string subject The parsing subject. string fileName The optional file name to use in error messages. Returns Type Description IList<Link<string>> The IList<Link<string>> parsed from subject. Exceptions Type Condition FormatException Thrown when parsing fails against subject. The exception's Data[\"cursor\"] will be set with the cursor where the fatal error occurred."
  },
  "api/Link.Foundation.Links.Notation._-1.html": {
    "href": "api/Link.Foundation.Links.Notation._-1.html",
    "title": "Struct _<TLinkAddress> | LinksPlatform's Platform.links-notation Library",
    "summary": "Struct _<TLinkAddress> A utility struct that provides convenient implicit conversions for creating links from various tuple combinations. The underscore name follows functional programming conventions for placeholder/utility types. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Link.Foundation.Links.Notation Assembly: LinkFoundation.LinksNotation.dll Syntax public struct _<TLinkAddress> Type Parameters Name Description TLinkAddress The type used for link addresses/identifiers. This can be any type that uniquely identifies a link, such as string, int, or Guid. Constructors | Edit this page View Source _(Link<TLinkAddress>) Initializes a new instance with the specified link. Declaration public _(Link<TLinkAddress> id) Parameters Type Name Description Link<TLinkAddress> id The link to wrap. Fields | Edit this page View Source Link Gets the underlying link represented by this utility struct. Declaration public readonly Link<TLinkAddress> Link Field Value Type Description Link<TLinkAddress> Operators | Edit this page View Source implicit operator _<TLinkAddress>(Link<TLinkAddress>) Implicitly converts a link to this utility struct. Declaration public static implicit operator _<TLinkAddress>(Link<TLinkAddress> value) Parameters Type Name Description Link<TLinkAddress> value The link to convert. Returns Type Description _<TLinkAddress> | Edit this page View Source implicit operator Link<TLinkAddress>(_<TLinkAddress>) Implicitly converts this utility struct back to a link. Declaration public static implicit operator Link<TLinkAddress>(_<TLinkAddress> value) Parameters Type Name Description _<TLinkAddress> value The utility struct to convert. Returns Type Description Link<TLinkAddress> | Edit this page View Source implicit operator _<TLinkAddress>((TLinkAddress, Link<TLinkAddress>, Link<TLinkAddress>, Link<TLinkAddress>)) Implicitly converts a tuple of address and three links to this utility struct. Declaration public static implicit operator _<TLinkAddress>((TLinkAddress, Link<TLinkAddress>, Link<TLinkAddress>, Link<TLinkAddress>) value) Parameters Type Name Description (TLinkAddress, Link<TLinkAddress>, Link<TLinkAddress>, Link<TLinkAddress>) value The tuple containing address and three links. Returns Type Description _<TLinkAddress> | Edit this page View Source implicit operator _<TLinkAddress>((TLinkAddress, Link<TLinkAddress>, Link<TLinkAddress>)) Implicitly converts a tuple of address and two links to this utility struct. Declaration public static implicit operator _<TLinkAddress>((TLinkAddress, Link<TLinkAddress>, Link<TLinkAddress>) value) Parameters Type Name Description (TLinkAddress, Link<TLinkAddress>, Link<TLinkAddress>) value The tuple containing address and two links. Returns Type Description _<TLinkAddress> | Edit this page View Source implicit operator _<TLinkAddress>((TLinkAddress, Link<TLinkAddress>)) Implicitly converts a tuple of address and link to this utility struct. Declaration public static implicit operator _<TLinkAddress>((TLinkAddress, Link<TLinkAddress>) value) Parameters Type Name Description (TLinkAddress, Link<TLinkAddress>) value The tuple containing address and link. Returns Type Description _<TLinkAddress> | Edit this page View Source implicit operator _<TLinkAddress>(TLinkAddress) Implicitly converts a link address to this utility struct. Declaration public static implicit operator _<TLinkAddress>(TLinkAddress id) Parameters Type Name Description TLinkAddress id The link address to convert. Returns Type Description _<TLinkAddress>"
  },
  "api/Link.Foundation.Links.Notation.html": {
    "href": "api/Link.Foundation.Links.Notation.html",
    "title": "Namespace Link.Foundation.Links.Notation | LinksPlatform's Platform.links-notation Library",
    "summary": "Namespace Link.Foundation.Links.Notation Classes ILinksGroupListExtensions Provides extension methods for collections of LinksGroup<TLinkAddress> instances. IListExtensions Provides extension methods for formatting collections of Link<TLinkAddress> instances. Parser Parses a string according to the rules of the Parser grammar. Structs Link<TLinkAddress> Represents a link in the Lino protocol with an optional identifier and nested values. Links can represent simple references, complex nested structures, or relationships between references to links. LinksGroup<TLinkAddress> Represents a group of links with hierarchical structure, where each group contains a primary link and optional nested groups. This structure supports the indentation-based syntax of the Lino protocol. _<TLinkAddress> A utility struct that provides convenient implicit conversions for creating links from various tuple combinations. The underscore name follows functional programming conventions for placeholder/utility types. id<TLinkAddress> A readonly struct that explicitly represents a link identifier/address. This type is used to distinguish between regular values and explicit identifiers in link construction."
  },
  "api/Link.Foundation.Links.Notation.id-1.html": {
    "href": "api/Link.Foundation.Links.Notation.id-1.html",
    "title": "Struct id<TLinkAddress> | LinksPlatform's Platform.links-notation Library",
    "summary": "Struct id<TLinkAddress> A readonly struct that explicitly represents a link identifier/address. This type is used to distinguish between regular values and explicit identifiers in link construction. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Link.Foundation.Links.Notation Assembly: LinkFoundation.LinksNotation.dll Syntax public readonly struct id<TLinkAddress> Type Parameters Name Description TLinkAddress The type used for link addresses/identifiers. This can be any type that uniquely identifies a link, such as string, int, or Guid. Constructors | Edit this page View Source id(TLinkAddress) Initializes a new identifier with the specified value. Declaration public id(TLinkAddress id) Parameters Type Name Description TLinkAddress id The identifier value. Fields | Edit this page View Source Id Gets the identifier value. Declaration public readonly TLinkAddress Id Field Value Type Description TLinkAddress Operators | Edit this page View Source explicit operator id<TLinkAddress>(TLinkAddress) Explicitly converts a value to an identifier struct. Declaration public static explicit operator id<TLinkAddress>(TLinkAddress id) Parameters Type Name Description TLinkAddress id The value to convert to an identifier. Returns Type Description id<TLinkAddress>"
  }
}