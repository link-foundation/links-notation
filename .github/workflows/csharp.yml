name: csharp

on:
  push:
    branches: main 
    paths:
      - 'csharp/**'
      - '.github/workflows/csharp.yml'
env:
  NUGETTOKEN: ${{ secrets.NUGET_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SCRIPTS_BASE_URL: https://raw.githubusercontent.com/linksplatform/Scripts/main/MultiProjectRepository

defaults:
  run:
    working-directory: csharp

jobs:
  findChangedCsFiles:
    runs-on: ubuntu-latest
    outputs:
      isCsFilesChanged: ${{ steps.setIsCsFilesChangedOutput.outputs.isCsFilesChanged }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files using defaults
        id: changed-files
        uses: tj-actions/changed-files@v41
      - name: Set output isCsFilesChanged
        id: setIsCsFilesChangedOutput
        run: |
          isCsFilesChanged='false'
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
          for changedFile in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $changedFile == csharp/*.cs ]] || [[ $changedFile == csharp/*.csproj ]] || [[ $changedFile == csharp/*.sln ]] || [[ $changedFile == csharp/* ]] || [[ $changedFile == .github/workflows/csharp.yml ]]; then
              echo "isCsFilesChanged='true'"
              isCsFilesChanged='true'
              break
            fi
          done
          echo "isCsFilesChanged=${isCsFilesChanged}" >> $GITHUB_OUTPUT
          echo "isCsFilesChanged: ${isCsFilesChanged}"

  test:
    needs: [findChangedCsFiles]
    if: ${{ needs.findChangedCsFiles.outputs.isCsFilesChanged == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x' # Specify your desired .NET version
      - name: Restore Dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Test
        run: dotnet test --configuration Release --no-build -f net8


  pusnToNuget:
    runs-on: ubuntu-latest
    needs: [test, findChangedCsFiles]
    if: ${{ needs.findChangedCsFiles.outputs.isCsFilesChanged == 'true' }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x' # Ensure this matches your project's target
      - name: Check if version already published to NuGet.org
        id: nuget-version-check
        run: |
          PACKAGE_VERSION=$(grep '<VersionPrefix>' Platform.Protocols.Lino/Platform.Protocols.Lino.csproj | sed 's/.*<VersionPrefix>\(.*\)<\/VersionPrefix>.*/\1/')
          PACKAGE_ID="Platform.Protocols.Lino"
          echo "Package: $PACKAGE_ID@$PACKAGE_VERSION"
          
          # Check if version exists on NuGet.org
          if curl -f "https://api.nuget.org/v3-flatcontainer/$PACKAGE_ID/$PACKAGE_VERSION/$PACKAGE_ID.nuspec" > /dev/null 2>&1; then
            echo "Version $PACKAGE_VERSION already exists on NuGet.org"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version $PACKAGE_VERSION does not exist on NuGet.org"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi
      - name: Read project information
        if: steps.nuget-version-check.outputs.should_publish == 'true'
        run: |
          export REPOSITORY_NAME=$(basename ${{ github.repository }})
          wget "$SCRIPTS_BASE_URL/read_csharp_package_info.sh"
          bash ./read_csharp_package_info.sh
      - name: Publish NuGet package
        if: steps.nuget-version-check.outputs.should_publish == 'true'
        run: |
          export REPOSITORY_NAME=$(basename ${{ github.repository }})
          wget "$SCRIPTS_BASE_URL/push-csharp-nuget.sh"
          bash ./push-csharp-nuget.sh

  publiseRelease:
    runs-on: ubuntu-latest
    needs: [test, findChangedCsFiles]
    if: ${{ needs.findChangedCsFiles.outputs.isCsFilesChanged == 'true' }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x' # Ensure this matches your project's target
      - name: Read project information
        if: ${{ github.event_name == 'push' }}
        run: |
          export REPOSITORY_NAME=$(basename ${{ github.repository }})
          wget "$SCRIPTS_BASE_URL/read_csharp_package_info.sh"
          bash ./read_csharp_package_info.sh
      - name: Publish release
        run: |
          export REPOSITORY_NAME=$(basename ${{ github.repository }})
          wget "$SCRIPTS_BASE_URL/publish-release.sh"
          chmod +x ./publish-release.sh
          wget "$SCRIPTS_BASE_URL/publish-csharp-release.sh"
          bash ./publish-csharp-release.sh
  generatePdfWithCode:
    runs-on: ubuntu-latest
    needs: [findChangedCsFiles]
    if: ${{ needs.findChangedCsFiles.outputs.isCsFilesChanged == 'true' }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x' # Ensure this matches your project's target
      - name: Install dependencies for PDF generation
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive texlive-lang-cyrillic texlive-latex-extra python3-pygments ghostscript python-is-python3
      - name: Generate PDF with code
        run: |
          export REPOSITORY_NAME=$(basename ${{ github.repository }})
          wget "$SCRIPTS_BASE_URL/format-csharp-files.py"
          wget "$SCRIPTS_BASE_URL/format-csharp-document.sh"
          wget "$SCRIPTS_BASE_URL/generate-csharp-pdf.sh"
          # Replace python-pygments with python3-pygments and python2 with python3
          sed -i 's/python-pygments/python3-pygments/g' ./generate-csharp-pdf.sh
          sed -i 's/python2/python3/g' ./format-csharp-document.sh
          # Fix Python 3 compatibility in format-csharp-files.py
          sed -i 's/reload(sys)/importlib.reload(sys)/g' ./format-csharp-files.py
          sed -i '1i import importlib' ./format-csharp-files.py
          # Also remove sys.setdefaultencoding which doesn't exist in Python 3
          sed -i '/sys.setdefaultencoding/d' ./format-csharp-files.py
          bash ./generate-csharp-pdf.sh

  publishDocumentation:
    runs-on: ubuntu-latest
    needs: [findChangedCsFiles]
    if: ${{ needs.findChangedCsFiles.outputs.isCsFilesChanged == 'true' }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x' # Ensure this matches your project's target
      - name: Install dependencies for documentation
        run: |
          # Create fake nuget command first before script tries to use it
          sudo bash -c 'echo "#!/bin/bash" > /usr/local/bin/nuget'
          sudo bash -c 'echo "echo \"Skipping nuget command: \$@\"" >> /usr/local/bin/nuget'
          sudo bash -c 'echo "exit 0" >> /usr/local/bin/nuget'
          sudo chmod +x /usr/local/bin/nuget
          # Update package list but don't fail if nuget package doesn't exist
          sudo apt-get update
          sudo apt-get install -y mono-complete || echo "Mono installation failed, using fake nuget command"
      - name: Publish documentation to gh-pages branch
        run: |
          export REPOSITORY_NAME=$(basename ${{ github.repository }})
          wget "$SCRIPTS_BASE_URL/docfx.json"
          wget "$SCRIPTS_BASE_URL/filter.yml"
          wget "$SCRIPTS_BASE_URL/toc.yml"
          wget "$SCRIPTS_BASE_URL/publish-csharp-docs.sh"
          # Replace any nuget install commands with no-op since we skip them
          sed -i 's/sudo apt-get install.*nuget.*/echo "Skipping nuget installation"/g' ./publish-csharp-docs.sh
          bash ./publish-csharp-docs.sh
