name: rust

on:
  push:
    branches: main 
    paths:
      - 'rust/**'
      - '.github/workflows/rust.yml'

env:
  CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

defaults:
  run:
    working-directory: rust

jobs:
  findChangedRustFiles:
    runs-on: ubuntu-latest
    outputs:
      isRustFilesChanged: ${{ steps.setIsRustFilesChangedOutput.outputs.isRustFilesChanged }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files using defaults
        id: changed-files
        uses: tj-actions/changed-files@v41
      - name: Set output isRustFilesChanged
        id: setIsRustFilesChangedOutput
        run: |
          isRustFilesChanged='false'
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
          for changedFile in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $changedFile == *.rs ]] || [[ $changedFile == Cargo.toml ]] || [[ $changedFile == Cargo.lock ]]; then
              echo "isRustFilesChanged='true'"
              isRustFilesChanged='true'
              break
            fi
          done
          echo "::set-output name=isRustFilesChanged::${isRustFilesChanged}"
          echo "isRustFilesChanged: ${isRustFilesChanged}"

  test:
    needs: [findChangedRustFiles]
    if: ${{ needs.findChangedRustFiles.outputs.isRustFilesChanged == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: cargo build --release
      - name: Test
        run: cargo test

  publishToCratesIO:
    needs: [test, findChangedRustFiles]
    if: ${{ needs.findChangedRustFiles.outputs.isRustFilesChanged == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: cargo build --release
      - name: Check if version already published
        id: version-check
        run: |
          PACKAGE_NAME=$(grep '^name = ' Cargo.toml | sed 's/name = "\(.*\)"/\1/')
          PACKAGE_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Package: $PACKAGE_NAME@$PACKAGE_VERSION"
          
          # Check if version exists on crates.io
          if curl -f "https://crates.io/api/v1/crates/$PACKAGE_NAME/$PACKAGE_VERSION" > /dev/null 2>&1; then
            echo "Version $PACKAGE_VERSION already exists on crates.io"
            echo "::set-output name=should_publish::false"
          else
            echo "Version $PACKAGE_VERSION does not exist on crates.io"
            echo "::set-output name=should_publish::true"
          fi
      - name: Publish to Crates.io
        if: steps.version-check.outputs.should_publish == 'true'
        run: cargo publish --token ${{ secrets.CARGO_TOKEN }}
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}