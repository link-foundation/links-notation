name: rust

on:
  push:
    branches: main 
    paths:
      - 'rust/**'
      - '.github/workflows/rust.yml'

env:
  CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

defaults:
  run:
    working-directory: rust

jobs:
  findChangedRustFiles:
    runs-on: ubuntu-latest
    outputs:
      isRustFilesChanged: ${{ steps.setIsRustFilesChangedOutput.outputs.isRustFilesChanged }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files using defaults
        id: changed-files
        uses: tj-actions/changed-files@v41
      - name: Set output isRustFilesChanged
        id: setIsRustFilesChangedOutput
        run: |
          isRustFilesChanged='false'
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
          for changedFile in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $changedFile == rust/*.rs ]] || [[ $changedFile == rust/Cargo.toml ]] || [[ $changedFile == rust/Cargo.lock ]] || [[ $changedFile == rust/* ]] || [[ $changedFile == .github/workflows/rust.yml ]]; then
              echo "isRustFilesChanged='true'"
              isRustFilesChanged='true'
              break
            fi
          done
          echo "isRustFilesChanged=${isRustFilesChanged}" >> $GITHUB_OUTPUT
          echo "isRustFilesChanged: ${isRustFilesChanged}"

  test:
    needs: [findChangedRustFiles]
    if: ${{ needs.findChangedRustFiles.outputs.isRustFilesChanged == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: cargo build --release
      - name: Test
        run: cargo test

  publishToCratesIO:
    needs: [test, findChangedRustFiles]
    if: ${{ needs.findChangedRustFiles.outputs.isRustFilesChanged == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: cargo build --release
      - name: Check if version already published
        id: version-check
        run: |
          PACKAGE_NAME=$(grep '^name = ' Cargo.toml | sed 's/name = "\(.*\)"/\1/')
          PACKAGE_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Package: $PACKAGE_NAME@$PACKAGE_VERSION"
          
          # Debug: Show extracted values
          echo "=== Debug: Extracted values ==="
          echo "PACKAGE_NAME: '$PACKAGE_NAME'"
          echo "PACKAGE_VERSION: '$PACKAGE_VERSION'"
          
          # Check if version exists on crates.io using the versions endpoint
          echo "=== Debug: Checking crates.io API ==="
          API_URL="https://crates.io/api/v1/crates/$PACKAGE_NAME/versions"
          echo "API URL: $API_URL"
          
          # Fetch all versions and check if our version exists
          RESPONSE=$(curl -s "$API_URL")
          echo "=== Debug: API Response (first 500 chars) ==="
          echo "$RESPONSE" | head -c 500
          echo ""
          
          # Check if the version exists in the response
          if echo "$RESPONSE" | jq -r '.versions[].num' 2>/dev/null | grep -q "^$PACKAGE_VERSION$"; then
            echo "Version $PACKAGE_VERSION already exists on crates.io"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version $PACKAGE_VERSION does not exist on crates.io"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi
          
          # Debug: Show final decision
          echo "=== Debug: Final decision ==="
          echo "Should publish: $(grep should_publish $GITHUB_OUTPUT | cut -d= -f2)"
      - name: Publish to Crates.io
        if: steps.version-check.outputs.should_publish == 'true'
        run: |
          echo "=== Debug: Publishing to crates.io ==="
          echo "Package will be published with token (hidden)"
          cargo publish --token ${{ secrets.CARGO_TOKEN }}
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}